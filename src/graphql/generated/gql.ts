/* eslint-disable */
import * as types from './graphql'
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  '\n  query GetGameBySlug($slug: String!) {\n    games(filters: { slug: { eq: $slug } }) {\n      name\n      short_description\n      description\n      price\n      rating\n      release_date\n      gallery {\n        src: url\n        label: alternativeText\n      }\n\n      cover {\n        src: url\n      }\n\n      developers {\n        name\n      }\n\n      publisher {\n        name\n      }\n\n      categories {\n        name\n      }\n\n      platforms {\n        name\n      }\n    }\n  }\n': typeof types.GetGameBySlugDocument
  '\n  query GetGames($limit: Int!, $start: Int) {\n    games(pagination: { limit: $limit, start: $start }) {\n      name\n      slug\n      cover {\n        url\n      }\n\n      developers {\n        name\n      }\n\n      price\n    }\n  }\n': typeof types.GetGamesDocument
  '\n  query GetRecommendedGames {\n    recommended {\n      section {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n        }\n        games {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n    }\n  }\n': typeof types.GetRecommendedGamesDocument
  '\n  query getUpcomingGames($date: Date!) {\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    showcase: home {\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n': typeof types.GetUpcomingGamesDocument
  '\n  query getHome($date: Date!) {\n    banners {\n      image {\n        url\n      }\n      title\n      subtitle\n      button {\n        label\n        link\n      }\n      ribbon {\n        text\n        color\n        size\n      }\n    }\n\n    newGames: games(\n      filters: { release_date: { lte: $date } }\n      sort: ["release_date:desc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    freeGames: games(\n      filters: { price: { eq: 0 } }\n      sort: "release_date:desc"\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    sections: home {\n      newGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      popularGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n\n        games(pagination: { limit: 8 }) {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      freeGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n': typeof types.GetHomeDocument
}
const documents: Documents = {
  '\n  query GetGameBySlug($slug: String!) {\n    games(filters: { slug: { eq: $slug } }) {\n      name\n      short_description\n      description\n      price\n      rating\n      release_date\n      gallery {\n        src: url\n        label: alternativeText\n      }\n\n      cover {\n        src: url\n      }\n\n      developers {\n        name\n      }\n\n      publisher {\n        name\n      }\n\n      categories {\n        name\n      }\n\n      platforms {\n        name\n      }\n    }\n  }\n':
    types.GetGameBySlugDocument,
  '\n  query GetGames($limit: Int!, $start: Int) {\n    games(pagination: { limit: $limit, start: $start }) {\n      name\n      slug\n      cover {\n        url\n      }\n\n      developers {\n        name\n      }\n\n      price\n    }\n  }\n':
    types.GetGamesDocument,
  '\n  query GetRecommendedGames {\n    recommended {\n      section {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n        }\n        games {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n    }\n  }\n':
    types.GetRecommendedGamesDocument,
  '\n  query getUpcomingGames($date: Date!) {\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    showcase: home {\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n':
    types.GetUpcomingGamesDocument,
  '\n  query getHome($date: Date!) {\n    banners {\n      image {\n        url\n      }\n      title\n      subtitle\n      button {\n        label\n        link\n      }\n      ribbon {\n        text\n        color\n        size\n      }\n    }\n\n    newGames: games(\n      filters: { release_date: { lte: $date } }\n      sort: ["release_date:desc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    freeGames: games(\n      filters: { price: { eq: 0 } }\n      sort: "release_date:desc"\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    sections: home {\n      newGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      popularGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n\n        games(pagination: { limit: 8 }) {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      freeGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n':
    types.GetHomeDocument
}

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetGameBySlug($slug: String!) {\n    games(filters: { slug: { eq: $slug } }) {\n      name\n      short_description\n      description\n      price\n      rating\n      release_date\n      gallery {\n        src: url\n        label: alternativeText\n      }\n\n      cover {\n        src: url\n      }\n\n      developers {\n        name\n      }\n\n      publisher {\n        name\n      }\n\n      categories {\n        name\n      }\n\n      platforms {\n        name\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetGameBySlug($slug: String!) {\n    games(filters: { slug: { eq: $slug } }) {\n      name\n      short_description\n      description\n      price\n      rating\n      release_date\n      gallery {\n        src: url\n        label: alternativeText\n      }\n\n      cover {\n        src: url\n      }\n\n      developers {\n        name\n      }\n\n      publisher {\n        name\n      }\n\n      categories {\n        name\n      }\n\n      platforms {\n        name\n      }\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetGames($limit: Int!, $start: Int) {\n    games(pagination: { limit: $limit, start: $start }) {\n      name\n      slug\n      cover {\n        url\n      }\n\n      developers {\n        name\n      }\n\n      price\n    }\n  }\n'
): (typeof documents)['\n  query GetGames($limit: Int!, $start: Int) {\n    games(pagination: { limit: $limit, start: $start }) {\n      name\n      slug\n      cover {\n        url\n      }\n\n      developers {\n        name\n      }\n\n      price\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetRecommendedGames {\n    recommended {\n      section {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n        }\n        games {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetRecommendedGames {\n    recommended {\n      section {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n        }\n        games {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getUpcomingGames($date: Date!) {\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    showcase: home {\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getUpcomingGames($date: Date!) {\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    showcase: home {\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getHome($date: Date!) {\n    banners {\n      image {\n        url\n      }\n      title\n      subtitle\n      button {\n        label\n        link\n      }\n      ribbon {\n        text\n        color\n        size\n      }\n    }\n\n    newGames: games(\n      filters: { release_date: { lte: $date } }\n      sort: ["release_date:desc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    freeGames: games(\n      filters: { price: { eq: 0 } }\n      sort: "release_date:desc"\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    sections: home {\n      newGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      popularGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n\n        games(pagination: { limit: 8 }) {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      freeGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getHome($date: Date!) {\n    banners {\n      image {\n        url\n      }\n      title\n      subtitle\n      button {\n        label\n        link\n      }\n      ribbon {\n        text\n        color\n        size\n      }\n    }\n\n    newGames: games(\n      filters: { release_date: { lte: $date } }\n      sort: ["release_date:desc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    upcomingGames: games(\n      filters: { release_date: { gt: $date } }\n      sort: ["release_date:asc"]\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    freeGames: games(\n      filters: { price: { eq: 0 } }\n      sort: "release_date:desc"\n      pagination: { limit: 8 }\n    ) {\n      name\n      slug\n      cover {\n        url\n      }\n      developers {\n        name\n      }\n      price\n    }\n\n    sections: home {\n      newGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      popularGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n\n        games(pagination: { limit: 8 }) {\n          name\n          slug\n          cover {\n            url\n          }\n          developers {\n            name\n          }\n          price\n        }\n      }\n\n      upcomingGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n\n      freeGames {\n        title\n        highlight {\n          title\n          subtitle\n          background {\n            url\n          }\n          floatImage {\n            url\n          }\n          buttonLabel\n          buttonLink\n          alignment\n        }\n      }\n    }\n  }\n']

export function graphql(source: string) {
  return (documents as any)[source] ?? {}
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never
